@startuml 类图
skin rose

struct expression
{
  ' /* Language it was entered in.  */
  + const struct language_defn *language_defn
  ' /* Architecture it was parsed in.  */
  + struct gdbarch *gdbarch
  + expr::operation_up op
}

enum type_code
{
    TYPE_CODE_BITSTRING
    TYPE_CODE_UNDEF
    TYPE_CODE_PTR
    TYPE_CODE_ARRAY
    TYPE_CODE_STRUCT
    TYPE_CODE_UNION
    TYPE_CODE_ENUM
    TYPE_CODE_FLAGS
    TYPE_CODE_FUNC
    TYPE_CODE_INT
    TYPE_CODE_FLT
    TYPE_CODE_VOID
    TYPE_CODE_SET
    TYPE_CODE_RANGE
    TYPE_CODE_STRING
    TYPE_CODE_ERROR
    TYPE_CODE_METHOD
    TYPE_CODE_METHODPTR
    TYPE_CODE_MEMBERPTR
    TYPE_CODE_REF
    TYPE_CODE_RVALUE_REF
    TYPE_CODE_CHAR
    TYPE_CODE_BOOL
    TYPE_CODE_COMPLEX
    TYPE_CODE_TYPEDEF
    TYPE_CODE_NAMESPACE
    TYPE_CODE_DECFLOAT
    TYPE_CODE_MODULE
    TYPE_CODE_INTERNAL_FUNCTION
    TYPE_CODE_XMETHOD
    TYPE_CODE_FIXED_POINT
    TYPE_CODE_NAMELIST
}
note bottom: 定义在 gdb/gdbtypes.h 中，\n 定义不同的数据类型

struct main_type
{
    + type_code code
    + unsigned int m_flag_unsigned
    + unsigned int m_flag_nosign
    + unsigned int m_flag_stub
    + unsigned int m_flag_target_stub
    + unsigned int m_flag_prototyped
    + unsigned int m_flag_varargs
    + unsigned int m_flag_vector
    + unsigned int m_flag_stub_supported
    + unsigned int m_flag_gnu_ifunc
    + unsigned int m_flag_fixed_instance
    + unsigned int m_flag_objfile_owned
    + unsigned int m_flag_endianity_not_default
    + unsigned int m_flag_declared_class
    + unsigned int m_flag_flag_enum
    + type_specific_kind type_specific_field
    + short nfields
    + const char *name
    + union type_owner m_owner;
    + struct type *target_type;
    + union 
    {
        struct field *fields;
        struct range_bounds *bounds;
        struct type *complex_type;
    } flds_bnds;
    + union type_specific type_specific;
    + struct dynamic_prop_list *dyn_prop_list
}
struct field {}
enum type_specific_kind {} 
struct range_bounds {}

main_type o->type_code
main_type o--> type_specific_kind
main_type o-->field
main_type o-->range_bounds

struct type
{
    + struct type* pointer_type
    + struct type* reference_type
    + struct type* rvalue_reference_type
    + struct type* chain
    + unsigned align_log2
    + unsigned m_instance_flags
    + ULONGEST length
    + struct main_type *main_type
}
note bottom: 位于 gdb/gdbtypes.h，\n 对数据类型的抽象
note right of type::pointer_type
    指向该类型的指针的type对象指针，
    该type对象的类型肯定为 TYPE_CODE_PTR
end note
note right of type::reference_type
    指向该类型的引用的type对象指针，
    该type对象的类型肯定为 TYPE_CODE_REF
end note
note right of type::rvalue_reference_type
    指向该类型的右值引用的type对象指针，
    该type对象的类型肯定为 TYPE_CODE_RVALUE_REF
end note
note left of type::chain
    变体链。指向仅限定符或者长度与此类型不同的类型。
    可能的限定符有 const、volatile、code-space、data-space
    以及 address class。
end note
note left of type::main_type
    核心类型，由一组特定类型共享
end note
type *-->main_type
main_type o--> type

struct general_symbol_info
{
    ' Name of the symbol.  This is a required field.  Storage for the
    '  name is allocated on the objfile_obstack for the associated
    '  objfile.  For languages like C++ that make a distinction between
    '  the mangled name and demangled name, this is the mangled
    '  name.
    + const char* m_name
    '  Value of the symbol.  Which member of this union to use, and what
    '  it means, depends on what kind of symbol this is and its
    '  SYMBOL_CLASS.  See comments there for more details.  All of these
    '  are in host byte order (though what they point to might be in
    '  target byte order, e.g. LOC_CONST_BYTES).
    + union {
        LONGEST ivalue
        const struct block* block
        const gdb_byte* bytes
        CORE_ADDR address
        const struct common_block* common_block
        symbol* chain
    } value
    + union {
        obstack* obstack
        const char* demangled_name
    } language_specific
    + language m_language
    ' This is only used by Ada.  If set, then the 'demangled_name' field
    '  of language_specific is valid.  Otherwise, the 'obstack' field is
    '  valid.
    + unsigned int ada_mangled
    + short m_section
    ' ====函数====
    const char *linkage_name () const
}
note left of general_symbol_info::m_name
    m_name是general_symbol_info结构体中的一个字段，用于存储符号的名称。
    这个字段是必需的，因为符号的名称是用于标识符号的基本信息。
    在GDB中，符号的名称分为两种，即Mangled Name和Demangled Name。
    对于C++等语言，有时需要将符号名称进行编码，以便可以区分不同的函数重载或者名称空间。
    这个过程就称为name mangling（名称编码）。
    因此，Mangled Name是编码后的符号名称，而Demangled Name是解码后的符号名称。
    在这里，m_name字段存储的是Mangled Name。
    此外，符号名称的存储空间是在objfile_obstack上分配的，
    这是与objfile相关的堆栈。这样做是为了方便在GDB的内部数据结构中管理符号信息。
end note

enum minimal_symbol_type
{
    mst_unknown
    mst_text
    mst_text_gnu_ifunc
    mst_data_gnu_ifunc
    mst_slot_got_plt
    mst_data
    mst_bss
    mst_abs
    mst_solib_trampoline
    mst_file_text
    mst_file_data
    mst_file_bss
    nr_minsym_types
}

struct minimal_symbol
{
    + unsigned long size
    + const char *filename
    + minimal_symbol_type type
    + unsigned int created_by_gdb
    'Two flag bits provided for the use of the target.  */
    + unsigned int target_flag_1
    + unsigned int target_flag_2
    'Nonzero iff the size of the minimal symbol has been set.
    'Symbol size information can sometimes not be determined, because
    'the object file format may not carry that piece of information.
    + unsigned int has_size
    'For data symbols only, if this is set, then the symbol might be
     'subject to copy relocation.  In this case, a minimal symbol
     'matching the symbol's linkage name is first looked for in the
     'main objfile.  If found, then that address is used; otherwise the
     'address in this symbol is used.  */
    + unsigned maybe_copied
    'Non-zero if this symbol ever had its demangled name set (even if
     'it was set to NULL).  */
    + unsigned int name_set
    'Minimal symbols with the same hash key are kept on a linked
     'list.  This is the link.  */
    + struct minimal_symbol *hash_next
    'Minimal symbols are stored in two different hash tables.  This is
    'the `next' pointer for the demangled hash table.  */
    + struct minimal_symbol *demangled_hash_next
}
minimal_symbol --|> general_symbol_info
note left of minimal_symbol::maybe_copied
end note

struct objfile
{
/' /* The object file's original name as specified by the user,
     made absolute, and tilde-expanded.  However, it is not canonicalized
     (i.e., it has not been passed through gdb_realpath).
     This pointer is never NULL.  This does not have to be freed; it is
     guaranteed to have a lifetime at least as long as the objfile.  */ '/
  + const char *original_name
  + CORE_ADDR addr_low
'   /* Some flag bits for this objfile.  */
  + objfile_flags flags
'   /* The program space associated with this objfile.  */
  + struct program_space *pspace
'   /* List of compunits.
    '  These are used to do symbol lookups and file/line-number lookups.  */
  + struct compunit_symtab *compunit_symtabs
'   /* The object file's BFD.  Can be null if the objfile contains only
    '  minimal symbols, e.g. the run time common symbols for SunOS4.  */
  + bfd *obfd
'   /* The per-BFD data.  Note that this is treated specially if OBFD
    '  is NULL.  */
  + struct objfile_per_bfd_storage *per_bfd
'   /* The modification timestamp of the object file, as of the last time
    '  we read its symbols.  */
  + long mtime
'   /* Obstack to hold objects that should be freed when we load a new symbol
    '  table from this object file.  */
  + struct obstack objfile_obstack
'   /* Structure which keeps track of functions that manipulate objfile's
'      of the same type as this objfile.  I.e. the function to read partial
'      symbols for example.  Note that this structure is in statically
'      allocated memory, and is shared by all objfiles that use the
'      object module reader of this type.  */
  + const struct sym_fns *sf
'   /* The "quick" (aka partial) symbol functions for this symbol
    '  reader.  */
  + std::forward_list<quick_symbol_functions_up> qf
'   /* Per objfile data-pointers required by other GDB modules.  */
  + struct registry_fields registry_data
'   /* Set of relocation offsets to apply to each section.
'      The table is indexed by the_bfd_section->index, thus it is generally
'      as large as the number of sections in the binary.
'      These offsets indicate that all symbols (including partial and
'      minimal symbols) which have been read have been relocated by this
'      much.  Symbols which are yet to be read need to be relocated by it.  */
  + ::section_offsets section_offsets
'   /* Indexes in the section_offsets array.  These are initialized by the
'      *_symfile_offsets() family of functions (som_symfile_offsets,
'      xcoff_symfile_offsets, default_symfile_offsets).  In theory they
'      should correspond to the section indexes used by bfd for the
'      current objfile.  The exception to this for the time being is the
'      SOM version.
'      These are initialized to -1 so that we can later detect if they
'      are used w/o being properly assigned to.  */
  + int sect_index_text
  + int sect_index_data
  + int sect_index_bss
  + int sect_index_rodata
'   /* These pointers are used to locate the section table, which
'      among other things, is used to map pc addresses into sections.
'      SECTIONS points to the first entry in the table, and
'      SECTIONS_END points to the first location past the last entry
'      in the table.  The table is stored on the objfile_obstack.  The
'      sections are indexed by the BFD section index; but the
'      structure data is only valid for certain sections
'      (e.g. non-empty, SEC_ALLOC).  */
  + struct obj_section *sections
  + struct obj_section *sections_end
'   /* GDB allows to have debug symbols in separate object files.  This is
'      used by .gnu_debuglink, ELF build id note and Mach-O OSO.
'      Although this is a tree structure, GDB only support one level
'      (ie a separate debug for a separate debug is not supported).  Note that
'      separate debug object are in the main chain and therefore will be
'      visited by objfiles & co iterators.  Separate debug objfile always
'      has a non-nul separate_debug_objfile_backlink.  */
'   /* Link to the first separate debug object, if any.  */
  + struct objfile *separate_debug_objfile
'   /* If this is a separate debug object, this is used as a link to the
'      actual executable objfile.  */
  + struct objfile *separate_debug_objfile_backlink
'   /* If this is a separate debug object, this is a link to the next one
'      for the same executable objfile.  */
  + struct objfile *separate_debug_objfile_link
'   /* Place to stash various statistics about this objfile.  */
  + struct objstats stats
'   /* A linked list of symbols created when reading template types or
'      function templates.  These symbols are not stored in any symbol
'      table, so we have to keep them here to relocate them
'      properly.  */
  + struct symbol *template_symbols
'   /* Associate a static link (struct dynamic_prop *) to all blocks (struct
'      block *) that have one.
'      In the context of nested functions (available in Pascal, Ada and GNU C,
'      for instance), a static link (as in DWARF's DW_AT_static_link attribute)
'      for a function is a way to get the frame corresponding to the enclosing
'      function.
'      Very few blocks have a static link, so it's more memory efficient to
'      store these here rather than in struct block.  Static links must be
'      allocated on the objfile's obstack.  */
  + htab_up static_links;
'   /* JIT-related data for this objfile, if the objfile is a JITer;
'      that is, it produces JITed objfiles.  */
  + std::unique_ptr<jiter_objfile_data> jiter_data
'   /* JIT-related data for this objfile, if the objfile is JITed;
'      that is, it was produced by a JITer.  */
  + std::unique_ptr<jited_objfile_data> jited_data
'   /* A flag that is set to true if the JIT interface symbols are not
'      found in this objfile, so that we can skip the symbol lookup the
'      next time.  If an objfile does not have the symbols, it will
'      never have them.  */
  + bool skip_jit_symbol_lookup
}

struct compunit_symtab
{
  + objfile *objfile()
  + void set_objfile(struct objfile *objfile)
  + symtab_range filetabs () const
  + void add_filetab (symtab *filetab)
  + const char *debugformat () const
  + void set_debugformat (const char *debugformat)
  + const char *producer () const
  + void set_producer (const char *producer)
  + const char *dirname () const
  + void set_dirname (const char *dirname)
  + const struct blockvector *blockvector () const
  + void set_blockvector (const struct blockvector *blockvector)
  + int block_line_section () const
  + void set_block_line_section (int block_line_section)
  + bool locations_valid () const
  + void set_locations_valid (bool locations_valid)
  + bool epilogue_unwind_valid () const
  + void set_epilogue_unwind_valid (bool epilogue_unwind_valid)
  + macro_table *macro_table () const
  + void set_macro_table (struct macro_table *macro_table)
  ' /* Make PRIMARY_FILETAB the primary filetab of this compunit symtab.
    '  PRIMARY_FILETAB must already be a filetab of this compunit symtab.  */
  + void set_primary_filetab (symtab *primary_filetab)
  ' /* Return the primary filetab of the compunit.  */
  + symtab *primary_filetab () const
  ' /* Set m_call_site_htab.  */
  + void set_call_site_htab (htab_t call_site_htab)
  ' /* Find call_site info for PC.  */
  + call_site *find_call_site (CORE_ADDR pc) const
  ' /* Unordered chain of all compunit symtabs of this objfile.  */
  + struct compunit_symtab *next
  ' /* Object file from which this symtab information was read.  */
  + struct objfile *m_objfile
  ' /* Name of the symtab.
  '    This is *not* intended to be a usable filename, and is
  '    for debugging purposes only.  */
  + const char *name
  ' /* Unordered list of file symtabs, except that by convention the "main"
  '    source file (e.g., .c, .cc) is guaranteed to be first.
  '    Each symtab is a file, either the "main" source file (e.g., .c, .cc)
  '    or header (e.g., .h).  */
  + symtab *m_filetabs
  ' /* Last entry in FILETABS list.
  '    Subfiles are added to the end of the list so they accumulate in order,
  '    with the main source subfile living at the front.
  '    The main reason is so that the main source file symtab is at the head
  '    of the list, and the rest appear in order for debugging convenience.  */
  + symtab *m_last_filetab
  ' /* Non-NULL string that identifies the format of the debugging information,
  '    such as "stabs", "dwarf 1", "dwarf 2", "coff", etc.  This is mostly useful
  '    for automated testing of gdb but may also be information that is
  '    useful to the user.  */
  + const char *m_debugformat
  ' /* String of producer version information, or NULL if we don't know.  */
  + const char *m_producer
  ' /* Directory in which it was compiled, or NULL if we don't know.  */
  + const char *m_dirname
  ' /* List of all symbol scope blocks for this symtab.  It is shared among
  '    all symtabs in a given compilation unit.  */
  + const struct blockvector *m_blockvector
  ' /* Section in objfile->section_offsets for the blockvector and
  '    the linetable.  Probably always SECT_OFF_TEXT.  */
  + int m_block_line_section
  ' /* Symtab has been compiled with both optimizations and debug info so that
  '    GDB may stop skipping prologues as variables locations are valid already
  '    at function entry points.  */
  + unsigned int m_locations_valid
  ' /* DWARF unwinder for this CU is valid even for epilogues (PC at the return
  '    instruction).  This is supported by GCC since 4.5.0.  */
  + unsigned int m_epilogue_unwind_valid
  ' /* struct call_site entries for this compilation unit or NULL.  */
  + htab_t m_call_site_htab
  ' /* The macro table for this symtab.  Like the blockvector, this
  '    is shared between different symtabs in a given compilation unit.
  '    It's debatable whether it *should* be shared among all the symtabs in
  '    the given compilation unit, but it currently is.  */
  + struct macro_table *m_macro_table
  ' /* If non-NULL, then this points to a NULL-terminated vector of
  '    included compunits.  When searching the static or global
  '    block of this compunit, the corresponding block of all
  '    included compunits will also be searched.  Note that this
  '    list must be flattened -- the symbol reader is responsible for
  '    ensuring that this vector contains the transitive closure of all
  '    included compunits.  */
  + struct compunit_symtab **includes
  ' /* If this is an included compunit, this points to one includer
  '    of the table.  This user is considered the canonical compunit
  '    containing this one.  An included compunit may itself be
  '    included by another.  */
  + struct compunit_symtab *user
} 
note bottom
Compunit symtabs contain the actual "symbol table", aka blockvector, as well
as the list of all source files (what gdb has historically associated with
the term "symtab").
Additional information is recorded here that is common to all symtabs in a
compilation unit (DWARF or otherwise).
                                                                             
Example:
For the case of a program built out of these files:
                                                                             
foo.c
  foo1.h
  foo2.h
bar.c
  foo1.h
  bar.h
                                                                             
This is recorded as:

objfile -> foo.c(cu) -> bar.c(cu) -> NULL
     |             |
     v            v
foo.c 	bar.c
     |             |
     v            v
foo1.h	foo1.h
     |             |
     v            v
foo2.h	bar.h
     |             |
     v            v
NULL	NULL
                                                                             
where "foo.c(cu)" and "bar.c(cu)" are struct compunit_symtab objects,
and the files foo.c, etc. are struct symtab objects. 
end note

struct bound_minimal_symbol
{
    + struct minimal_symbol *minsym
    + struct objfile *objfile
}
bound_minimal_symbol *-->minimal_symbol
bound_minimal_symbol o->objfile

struct symbol
{
  + struct type* m_type
  + union {
    struct symtab* symtab
    struct gdbarch* arch
  } owner
  + domain_enum_tag m_domain
  + uint32 m_aclass_index
  + uint32 m_is_objfile_owned
  + uint32 m_is_argument
  + uint32 m_is_inlined
  + uint32 maybe_copied
  + symbol_subclass_kind subclass
  + bool artificial
  + uint16 m_line
  + void* aux_value
  + struct symbol* hash_next
}
symbol --|> general_symbol_info
symbol o--> type

enum language
{
  language_unknown,	/* Language not known */
  language_auto,		/* Placeholder for automatic setting */
  language_c,			/* C */
  language_objc,		/* Objective-C */
  language_cplus,		/* C++ */
  language_d,			/* D */
  language_go,			/* Go */
  language_fortran,		/* Fortran */
  language_m2,		/* Modula-2 */
  language_asm,		/* Assembly language */
  language_pascal,		/* Pascal */
  language_opencl,		/* OpenCL */
  language_rust,		/* Rust */
  language_minimal,		/* All other languages, minimal support only */
  language_ada,		/* Ada */
  nr_languageslanguage_unknow

}

enum storage_type
{
  ENUM_UNKNOWN
	ENUM_REGISTER
	ENUM_STACK
	ENUM_MODULE_TEXT
	ENUM_MODULE_DATA
	ENUM_HEAP
	ENUM_ALL
}

struct ca_segment
{
    'virtual address in the target process
	+ address_t m_vaddr
    'size of the virtual memory segment
	+ size_t    m_vsize
    'mmapped address in the host process core_ananlyzer
	+ char*     m_faddr
    '	corresponding size in the core file
	+ size_t    m_fsize
	+ enum storage_type m_type
    ' indicating the bit vector is initialized
	+ unsigned int m_bitvec_ready
	+ unsigned int m_read
	+ unsigned int m_write
	+ unsigned int m_exec
	+ unsigned int m_reserved
    ' bit vector of addressable pointers
	+ unsigned int* m_ptr_bitvec
	+ struct ca_thread m_thread
	+ const char*   m_module_name;
}
ca_segment o--> storage_type
note left of ca_segment::m_ptr_bitvec
    标识 segment 中每一个地址是否为可访问指针的数组，
    数组中的单个元素 int 中的每一个 bit，标识每32个指针是否可访问
end note

struct reg_ref
{
	+ int tid
	+ int reg_num
	+ const char* name
}

struct stack_ref
{
	' //ptid_t ptid;	// "Actual process id";
    ';		// thread id used by debugger
	+ int tid
	+ int frame
	+ int offset
}

struct module_ref
{
	address_t base
	size_t    size
	const char* name
}

struct heap_ref
{
	address_t addr
	size_t    size
	int       inuse
}

struct anon_ref
{
	size_t size
}

struct object_reference
{
    '0 is referenced, 1 means direct ref,
    '2 stands for 2nd level indirect ref, and so on
	+ int level
    ' I am a reference to the object in this slot
	+ int target_index
	+ enum storage_type  storage_type;
    ' the address that references
	+ address_t vaddr
    ' the value at the above address, i.e. the the referenced
	+ address_t value
	+ union
	{
	    struct reg_ref       reg
		struct stack_ref     stack
		struct module_ref    module
		struct heap_ref      heap
		struct anon_ref      target
	} where
}
note bottom
  object_reference - 是用来描述对象之间的引用关系
  level - 描述是几级引用
  target_index - 如果本 ref 放在了 ref_list 之中时的下标
  vaddr - 是目标程序的虚拟地址
  value - 是本虚拟地址指向的值，除 level0 外，其他的 level 存储指向的地址
  where - 根据存储类型的不同，记录本引用的地址的所在的信息，
    如果是代码段和数据段则记录段首地址和段大小名字之类，
    如果是堆段则记录其所在的 block 地址、大小和是否使用标记
end note

object_reference o-> storage_type
object_reference o--> reg_ref
object_reference o--> stack_ref
object_reference o--> module_ref
object_reference o--> heap_ref
object_reference o--> anon_ref

struct object_range
{
    + address_t low
    + address_t high
}

struct inuse_block
{
    address_t addr
    size_t size
}

struct reachable_block
{
    + size_t aggr_size
    + unsigned long aggr_count
    + unsigned int* index_map
}
note left: 
reachable_block --|> inuse_block

struct reg
{
    int regnum
    struct frame_id next_frame_id
}

struct computed
{
    const struct lval_funcs *funcs
    void *closure
}

enum lval_type
{
  ' /* * Not an lval.  */
  not_lval
  ' /* * In memory.  */
  lval_memory
  ' /* * In a register.  Registers are relative to a frame.  */
  lval_register
  ' /* * In a gdb internal variable.  */
  lval_internalvar
  ' /* * Value encapsulates a callable defined in an extension language.  */
  lval_xcallable
  ' /* * Part of a gdb internal variable (structure field).  */
  lval_internalvar_component
  ' /* * Value's bits are fetched and stored using functions provided
      ' by its creator.  */
  lval_computed
}

struct value
{
  + enum lval_type lval
  + unsigned int modifiable
  + unsigned int lazy
  + unsigned int initialized
  + unsigned int stack
  + bool is_zero
  + union
  {
    CORE_ADDR address
    struct reg reg
    struct internalvar* internalvar
    struct xmethod_worker* xm_worker
    struct computed computed
  } location
  + LONGEST offset
  + LONGEST bitsize
  + LONGEST bitpos
  + int reference_count
  + value_ref_ptr parent
  + struct type *type
  + struct type *enclosing_type
  + LONGEST embedded_offset
  + LONGEST pointed_to_offset
  + gdb::unique_xmalloc_ptr<gdb_byte> contents
  + std::vector<range> unavailable
  + std::vector<range> optimized_out
}
value o-->reg
value o-->computed
value o-->type

enum register_status {
  REG_UNKNOWN
  REG_VALID
  REG_UNAVAILABLE
}

struct reg_buffer_common {
  + {abstract} register_status get_register_status(int regnum)
  + {abstract} void raw_supply(int regnum, const void* buf)
  + {abstract} void raw_collect(int regnum, void* buf)
  + {abstract} bool raw_compare(int regnum, const void* buf, int offset) const
}
reg_buffer_common o--> register_status

struct regcache_descr {
  ' /* The architecture this descriptor belongs to.  */
  + struct gdbarch *gdbarch;
  ' /* The raw register cache.  Each raw (or hard) register is supplied
  '    by the target interface.  The raw cache should not contain
  '    redundant information - if the PC is constructed from two
  '    registers then those registers and not the PC lives in the raw
  '    cache.  */
  + long sizeof_raw_registers;
  ' /* The cooked register space.  Each cooked register in the range
  '    [0..NR_RAW_REGISTERS) is direct-mapped onto the corresponding raw
  '    register.  The remaining [NR_RAW_REGISTERS
  '    .. NR_COOKED_REGISTERS) (a.k.a. pseudo registers) are mapped onto
  '    both raw registers and memory by the architecture methods
  '    gdbarch_pseudo_register_read and gdbarch_pseudo_register_write.  */
  + int nr_cooked_registers;
  + long sizeof_cooked_registers;
  ' /* Offset and size (in 8 bit bytes), of each register in the
  '    register cache.  All registers (including those in the range
  '    [NR_RAW_REGISTERS .. NR_COOKED_REGISTERS) are given an
  '    offset.  */
  + long *register_offset;
  + long *sizeof_register;
  ' /* Cached table containing the type of each register.  */
  + struct type **register_type;
}
regcache_descr o--> gdbarch
regcache_descr o--> type

class reg_buffer {
  struct regcache_descr* m_descr
}
reg_buffer --|> reg_buffer_common
reg_buffer o--> regcache_descr
@enduml